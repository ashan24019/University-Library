import ImageKit from "imagekit-javascript";
import ImageKitProviderProps, { ImageKitProviderExtractedProps } from "../components/ImageKitProvider/props";
import IKImageProps from "../components/IKImage/props";
import { Props as IKVideoProps } from "../components/IKVideo/props";
import { ImageProps } from "next/image";
import { Transformation } from "imagekit-javascript/dist/src/interfaces/Transformation";
export type IKImageState = {
    currentUrl?: string;
    originalSrc: string;
    lqipSrc?: string;
    originalSrcLoaded: boolean;
    intersected: boolean;
    contextOptions: ImageKitProviderExtractedProps;
    observe?: IntersectionObserver;
    initialzeState: boolean;
};
export declare const fetchEffectiveConnection: () => any;
export declare const areObjectsDifferent: <T>(prevProps: T, newProps: T, propsAffectingURL: Array<string>) => boolean;
type GetSrcReturnType = {
    originalSrc: string;
    lqipSrc?: string;
};
export declare const getSrc: ({ urlEndpoint, lqip, src, path, transformation, transformationPosition, queryParameters }: IKImageProps & ImageKitProviderProps & IKVideoProps, ikClient: ImageKit, contextOptions: ImageKitProviderExtractedProps) => GetSrcReturnType;
export declare const getIKElementsUrl: ({ lqip, loading }: IKImageProps, { intersected, originalSrcLoaded, originalSrc, lqipSrc }: IKImageState) => string | undefined;
export declare function hasProperty(array: Array<Transformation>, property: string): boolean;
export declare const updateTransformation: ({ width, height, transformation, src, path, quality, }: IKImageProps & ImageKitProviderProps & Pick<ImageProps, "height" | "width" | "quality">) => Partial<{
    [key: string]: string;
}>[] | undefined;
export {};
