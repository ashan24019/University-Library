import React from "react";
import ImageKitProviderProps from "../ImageKitProvider/props";
import { OverrideValues } from "./props";
declare const IKUpload: React.ForwardRefExoticComponent<{
    fileName?: string;
    useUniqueFileName?: boolean;
    tags?: Array<string>;
    folder?: string;
    isPrivateFile?: boolean;
    customCoordinates?: string;
    responseFields?: Array<string>;
    extensions?: import("./props").Extension;
    webhookUrl?: string;
    overwriteFile?: boolean;
    overwriteAITags?: boolean;
    overwriteTags?: boolean;
    overwriteCustomMetadata?: boolean;
    customMetadata?: string | Record<string, string | number | boolean | Array<string | number | boolean>>;
    onError?: (err: import("./props").UploadError) => void;
    onSuccess?: (res: import("./props").IKUploadResponse) => void;
    onUploadStart?: (evt: React.ChangeEvent<HTMLInputElement>) => void;
    onUploadProgress?: (evt: ProgressEvent<XMLHttpRequestEventTarget>) => void;
    validateFile?: (file: File) => boolean;
    transformation?: {
        pre?: string;
        post?: ({
            type: "transformation";
            value: string;
        } | {
            type: "gif-to-video";
            value?: string;
        } | {
            type: "thumbnail";
            value?: string;
        } | {
            type: "abs";
            value: string;
            protocol: "hls" | "dash";
        })[];
    };
    checks?: string;
    overrideParameters?: (file: File) => OverrideValues;
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, "onError"> & ImageKitProviderProps & React.RefAttributes<HTMLInputElement>>;
export default IKUpload;
